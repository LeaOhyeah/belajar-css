==== Pendahuluan ====


==== Membuat Project ====


==== Pengenalan CSS ====
css ---
css (Cascading Style Sheet) adalah bahasa berbasis rule/aturan
kita akan mendefinisikan rule untuk element html yang kita buat
membuat rule biasanya dengan menyebutkan nama element atau selector, kurung kurawal buka dan tutup, kemudian rule didalamnya
rule disebutkan dengan property: value;
contoh
h1 {
    color: red;
    font-size: 20px;
} 


==== Menambah CSS ====
terdapat tiga cara,
inline: di atribut style html
internal: di tag style pada file html
external: di file css terpisah dan dipanggil dengan tag link 

==== Comment ====
terdapat komentar satu baris dan lebih dari satu baris

==== ID ====
selain memilih element menggunakan selector element, kita bisa menggunakan selector id untuk memberi style pada satu element spesifik
untuk menggunakan id, tambahkan # diawalnya
contoh
#judul{
    color: red;
}

==== Class ====
jika ingin menambahkan style ke beberapa element spesifik, kita dapat menggunakan class
untuk menggunakan class, tambahkan . diawalnya
contoh
.judul{
    color: red;
}
css juga mendukung multiple class, atau satu element html memiliki lebih dari satu class
ini dilakukan dengan menggunakan spasi sebagai pemisah

==== Selector ====
sebelumnya kita tau terdapat 3 cara selector atau memilih element yang diberi style
yaitu tag (type selector), #id (id selector), dan .class (class selector)
kita bisa membuat sintax untuk beberapa selector dengan dipisahkan tanda koma
contoh
h1, h2, #title{
    color: red;
}


###
==== Combinator Selector ====
adalah sesuatu yang menjelaskan relasi antar selector, terdapat 4 yaitu
- descendant selector (memilih element anak), menggunakan spasi
contoh div p {color: red;}
artinya memilih p yang didalam div
- child selector (memilih hanya element anak pertama tapi bukan satu), menggunakan >
contoh div > p {color: red;}
artinya memilih p yang didalam div dan tidak didalam tag lain lagi
- adjacent sibling selector (memilih 1 element saudara setelahnya), menggunakan +
contoh div + p {color: red;}
artinya memilih 1 p yang ada setelah div dan tidak didalam tag lain lagi
- general sibling selector (memilih semua element saudara setelahnya), menggunakan ~
contoh div ~ p {color: red;}
artinya memilih semua p yang ada setelah div dan tidak didalam tag lain lagi, tapi boleh disamping tag lain


==== Attribute Selector ====
css mendukung selector menggunakan atribut, terdapat banyak cara diantaranya
ini semua tag yang ada atribut dipilih
    namaTag[atribut] {color:red;}
ini semua tag yang ada atribut dipilih dan value dipilih
    namaTag[atribut="value"] {color:red;}
ini semua tag yang ada atribut dipilih dan value dipilih di dalam sebuah kalimat 
    namaTag[atribut~="value"] {color:red;}
ini semua tag yang ada atribut dipilih dan value dipilih di dalam sebuah kalimat atau dipisah dengan -
    namaTag[atribut|="value"] {color:red;}
ini semua yang diawali dengan value
    namaTag[atribut^="value"] {color:red;}
ini semua yang diakhiri dengan value
    namaTag[atribut$="value"] {color:red;}
ini semua yang memiliki kata value
    namaTag[atribut*="value"] {color:red;}
selain dengan tag[atribut] semua itu bisa dilakukan hanya dengan atribut
    [atribut="value"]{color: red;}


==== Color ====
color merupakan rule css untuk mengubah warna, bisa digunakan pada teks
dokumentasi lengkap https://developer.mozilla.org/en-US/docs/Web/CSS/color
daftar nama-nama warna yang didukung web https://htmlcolorcodes.com/color-names/


###
==== Text ====
css dapat digunakan untuk style text, contoh-contoh sebelumnya kita mengubah warna
sebenarnya masih banyak styling lain untuk teks seperti:

text-align (untuk teks alignment)
Berikut adalah nilai text-align:
start Meratakan teks sesuai arah penulisan 
end Meratakan teks ke arah sebaliknya dari start
left Teks diratakan ke kiri.
right Teks diratakan ke kanan.
center Teks diratakan di tengah secara horizontal.
justify Teks diratakan di kedua sisi (kiri & kanan).
match-parent Menyamakan perataan teks dengan elemen induk.

text-decoration-* (menambah garsi dekorasi teks) // shorthand
Berikut adalah nilai macam text-decoration
text-decoration-line (mengatur garisnya)
text-decoration-color (warna garisnya)
text-decoration-style (gaya garisnya)
text-decoration-thickness (ketebalan garisnya)

text spacing
Berikut adalah nilai macam text-decoration
text-indent (spaces di awal)
latter-spacing (spaces antar huruf)
line-height (spaces antar baris)
word-spacing (spaces antar kata)
white-space (bagaimana spaces ditampilkan)

text shadow (efek bayangan)
text-shadow: offest-x | offest-y | blur-radius | color;

masih banyak yang lain di sini
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_text
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_text_decoration


==== Font ====
saat membuat tulisan, biasanya Web Browser menggunakan default font atau dari OS nya
agar konsisten, font bisa diatur dengan CSS
https://developer.mozilla.org/en-US/docs/Web/CSS/font
property ini termasuk shorthand atau singkatan banyak property lain diantaranya
'font-style', 'font-variant', 'font-weight', 'font-size', 'line-height', and 'font-family'
https://developer.mozilla.org/en-US/docs/Web/CSS/font-family    
font-family tergantung dengan OS, jika tidak ada di OS, maka hasilnya tidak akan sesuai dengan yang kita mau
maka disarankan menggunakan generic
https://www.w3.org/TR/css-fonts-3/#generic-font-families 
font populer https://fonts.google.com/ 


==== Background ====
css bisa digunakan untuk merubah background dengan atribut background
ini juga merupakan sebuah shorthand
https://developer.mozilla.org/en-US/docs/Web/CSS/background 
background image akan dibahas di mater selanjutnya
background-color akan kita pelajari disini


==== Box Model ====
terdapat konsep box model yang biasanya digunakan untuk mengatur tata letak
setiap element memiliki box yang terdiri dari content, padding, border dan margin
margin itu transparnt dan tidak bisa diwarnai
kita dapat mengatur size dasar dengan height dan width, kemudian mengatur ukuran
box-box nya juga dengan atribut dan value masing-masing, seperti
padding: top, right, bottom, left;
border: top, right, bottom, left;
margin: top, right, bottom, left;
atau hanya mengisi satu nilai yang akan digunakan ke semua sisi
atau hanya mengisi dua nilai yang akan digunakan di x dan y
ketika dua margin saling bertemu maka akan mengambil nilai tertinggi, bukan ditambah


==== Debug dengan Browser ====
jika ingin melihat box model pada halaman html kita bisa melakukan nya di menu inspect


==== Min dan Max Size ====
untuk menjaga ukuran element tidak terlalu kecil atau terlalu besar
kita bisa mengatur nya dengan property css
min-height: ukurann; min-width: ukuran;
max-height: ukurann; max-width: ukuran;
ini berguna jika menggunakan ukuran persen agar sesuai ekspektasi


==== Border ====
didalam box model terdapat border, untuk mengubah border bisa menggunakan property border
ini adalah shorthand juga dari border-color, border-style, border-width


==== Outline ====
outline mirip dengan border, berada setelah border, yang berbeda dia tidak mengambil area dari Box
artinya tidak mengganggu layout
singkatnya outline tidak menggeser konten tapi menelan margin


==== Background Image ====
selain Color, kita juga bisa menggunakan image sebagai background
untuk menggunakan image sebagai background kita bisa menggunakan property background-image
https://developer.mozilla.org/en-US/docs/Web/CSS/background-image
background-attachment, background-blend-mode, background-clip, background-color, background-image
background-origin, background-position, background-position-x, background-position-y, background-repeat, background-size


==== Opacity ====
element di HTML bisa diatur transparansinya menggunakan property opacity
ini mempengaruhi semua elemen didalamnya, termasuk background
nilai nya dari 1 sampai 0, 1 default dan 0 transparnt sepenuhnya


==== Value dan Unit ====
10px, 10 adalah value, px adalah unit
kita menggunakan berbagai jenis value, dari mulai number, text, color name, rgb, image, dan lain-lain
semua standarisasi dari CSS Value dan Unit sudah ditetapkan di spesifikasi berikut :
https://drafts.csswg.org/css-values/ 
value dan unit yang penting dimengerti adalah untuk length
https://developer.mozilla.org/en-US/docs/Web/CSS/length

###
relative length unit (mengikuti parent)
absolute length unit (fix atau pasti)
interpolation ()


==== Writing Mode ====
writing mode digunakan untuk menentukan cara membaringkan text, apakah ingin horizontal, atau vertical
horizontal-tb (top bottom)
vertical-lr (left right) dll


==== Overflow ====
Overflow: kejadian dimana konten text melebihi ukuran box nya
kita bisa menentukan bagaimana cara menampilkan ketika terjadi Overflow dengan property Overflow
default adalah visible


==== Pseudo Elements ====
Pseudo-elements selector adalah keyword untuk menambah selector ke bagian tertentu dari elemen yang terseleksi
saat memilih Pseudo-elements kita menggunakan tanda pemisah ::
https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements


==== Pseudo Classes ====
ini adalah keyword untuk selector yang merepresentasikan state / keadaan tertentu dari elemen yang diseleksi
tanda pemisah nya :
https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes


==== Link ====
kita sering sekali menggunakan link menggunakan tag a
link memiliki banyak sekali pseudo-classes yang bisa kita gunakan untuk mengubah tampilan Link pada state tertentu
https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes#user_action_pseudo-classes
https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes#location_pseudo-classes


==== List ====
property untuk mengubah List
list-style-type, mengubah jenis list https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type 
list-style-image, mengubah item list -> gambar https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-image
list-style-position, mengubah posisi item https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-image
shortcut / shorthand list-style https://developer.mozilla.org/en-US/docs/Web/CSS/list-style 


==== Table ====
table di HTML, kita akan banyak menggunakan Box Model
mengatur border pada tabel, menggunakan border pada table, tr, th, td, dan lain-lain
https://developer.mozilla.org/en-US/docs/Web/CSS/border 
jika kita ingin menghilangkap jarak tiap kolom gunakan border-collapse :
https://developer.mozilla.org/en-US/docs/Web/CSS/border-collapse 
bisa juga tambahkan padding pada bagian-bagian tabel    


==== Form ====
element input bisa diatur menggunakan Box Model di CSS
khusus Form, terdapat pseudo-classes yang dikhususkan untuk input form :
https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes#input_pseudo-classes


==== Content ====
adalah property untuk mengubah isi element, ini hanya bisa digunakan untuk konten gambar
jika ingin mengubah konten teks maka menggunakan pseudo-elements
https://developer.mozilla.org/en-US/docs/Web/CSS/content


==== Counter ====
penomoran di css dapat dilakukan otomatis dengan counter https://developer.mozilla.org/en-US/docs/Web/CSS/counter
set untuk membuat, increment untuk menaikkan, reset untuk mengulang, counter() untuk mengambil nilai sekarang
https://developer.mozilla.org/en-US/docs/Web/CSS/counter-set
https://developer.mozilla.org/en-US/docs/Web/CSS/counter-increment
https://developer.mozilla.org/en-US/docs/Web/CSS/counter-reset

==== Filter ====
CSS bisa digunakan untuk menambahkan filter di element yang kita inginkan
Kita bisa menggunakan property filter
https://developer.mozilla.org/en-US/docs/Web/CSS/filter
semua akan di filter, border, bg dll


==== Import ====
sebelumnya, kita menambahkan kode CSS dari external file menggunakan tag link
CSS juga memiliki kemampuan untuk mengambil kode CSS dari luar menggunakan At-Rule, dimana harus ditempatkan dibagian atas kode CSS
Kita bisa mengambil kode CSS dari external menggunakan rule @import
https://developer.mozilla.org/en-US/docs/Web/CSS/@import 


==== Cascade ====
Saat kita menggunakan CSS, kita harus tahu konsep bernama Cascade (Cascading Style Sheet)
Cascade adalah logika bagaimana web browser mengumpulkan property CSS dari berbagai sumber sebelum diterapkan ke element yang dipilih
Web browser akan mengambil sumber property CSS dari tiga sumber, yaitu User Agent, Author dan User
https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade

User Agent Stylesheet
User Agent atau browser, biasanya memiliki nilai awal untuk stylesheet
Tiap User Agent biasanya berbeda, oleh karena itu saat membuat CSS kita harus hati-hati dengan nilai awal User Agent, karena bisa berbeda
untuk tiap browser,Salah satu contoh yang banyak dilakukan oleh programmer web adalah, melakukan reset ke nilai kosong
Contohnya seperti ini : https://github.com/necolas/normalize.css/blob/master/normalize.css

Author Stylesheet
Saat membuat web, kadang biasanya kita tidak langsung membuat file CSS, biasanya kita akan menggunakan stylesheet buatan orang lain, contoh
yang populer adalah Bootstrap atau TailwindCSS https://getbootstrap.com/ atau https://tailwindcss.com/ 
Biasanya User akan melakukan import atau link untuk Author Stylesheet

User Stylesheet
User stylesheet adalah yang kita buat sendiri, biasanya dibuat untuk mengubah stylesheet yang sudah digunakan baik itu dari User Agent atau Author

Cascade Order
Saat kita menggunakan sumber-sumber tadi untuk membuat CSS, Web Browser akan menggabungkan semua property CSS untuk element menggunakan urutan sebagai berikut
- User Agent Stylesheet
- Author Stylesheet
- User Stylesheet
Jika ternyata kita membuat aturan yang sama di CSS, maka urutan posisi yang paling akhir yang akan digunakan

!important
Saat kita membuat aturan CSS, semua aturan akan mendapatkan prioritas normal
Jika kita ingin membuat sebuah aturan menjadi sangat penting, sehingga tidak boleh digantikan setelahnya oleh aturan lain, 
maka kita bisa menambahkan !important pada aturan tersebut


==== Layer ====
Masalah dengan !important
Menggunakan !important sangat tidak flexible, karena artinya kita tidak bisa mengubah propertinya lagi
Alternatif lain yang lebih flexible adalah menggunakan @layer

@layer
@layer adalah fitur di dalam CSS Cascade, dimana kita bisa membuat layer (seperti tumpukan), dimana posisi layer bisa diurutkan sesuai dengan yang kita mau
Dengan menggunakan @layer, kita bisa menentukan mana yang lebih penting dan mana yang tidak begitu penting dengan mengubah posisi layer
Dengan begitu, kita bisa mengubah-ubah posisi, tanpa harus menggunakan !important lagi
https://developer.mozilla.org/en-US/docs/Web/CSS/@layer 


==== Materi Selanjutnya ====
css layout
javascript